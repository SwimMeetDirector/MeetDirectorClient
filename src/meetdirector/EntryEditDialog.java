/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package meetdirector;

import entity.SwimMeetAthlete;
import entity.SwimMeetEvent;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nhorman
 */
public class EntryEditDialog extends javax.swing.JDialog {
 
    /**
     * Creates new form EntryEditDialog
     */
    public EntryEditDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        // Hide the object column for each of our tables
        this.EventTable.removeColumn(this.EventTable.getColumnModel().getColumn(4));
        this.SwimmerTable.removeColumn(this.SwimmerTable.getColumnModel().getColumn(2));
        
        this.populateEventTable();
    }

    private void populateEventTable() {
        List<SwimMeetEvent> events =  SwimMeetEvent.getAllEvents();
        Comparator<SwimMeetEvent> NumericalSort = new Comparator<SwimMeetEvent>() {
            public int compare(SwimMeetEvent c1, SwimMeetEvent c2) {
                    return c1.getEventNumber().compareTo(c2.getEventNumber());
            }
        };
        Object[] rowData = new Object[5];
        Collections.sort(events, NumericalSort);
        
        DefaultTableModel dm = (DefaultTableModel)this.EventTable.getModel();
        dm.setRowCount(0);
        Iterator<SwimMeetEvent> iterator = events.iterator();
        while (iterator.hasNext()) {
            SwimMeetEvent event = iterator.next();
            rowData[0] = event.getEventNumber();
            rowData[1] = event.getGender().value();
            rowData[2] = event.getDistance();
            rowData[3] = event.getStroke().value();
            rowData[4] = event;
            dm.addRow(rowData);
        }
        
        
    }
    
    private void clearSwimmerTable() {
        DefaultTableModel dm = (DefaultTableModel)this.SwimmerTable.getModel();
        dm.setRowCount(0);
    }
    
    private void populateSwimmerTable(SwimMeetEvent event) {
        List<SwimMeetAthlete> swimmers;
        Comparator<SwimMeetAthlete> alphabeticalSort = new Comparator<SwimMeetAthlete>() {
            public int compare(SwimMeetAthlete c1, SwimMeetAthlete c2) {
                    return c1.getName().getLastName().compareTo(c2.getName().getLastName());
            }
        };
        swimmers = SwimMeetAthlete.getAllAthletes();
        Collections.sort(event.getSwimmers(), alphabeticalSort);
        Object[] rowData = new Object[3];
        this.clearSwimmerTable();
        DefaultTableModel dm = (DefaultTableModel)this.SwimmerTable.getModel();
        Iterator<SwimMeetAthlete> iterator = swimmers.iterator();
        while (iterator.hasNext()) {
            SwimMeetAthlete swimmer = iterator.next();
            if (event.getSwimmers().contains(swimmer))
                rowData[0] = true;
            else
                rowData[0] = false;
            rowData[1] = swimmer.getName().getLastName() + ", " + swimmer.getName().getFirstName();
            rowData[2] = swimmer;
            dm.addRow(rowData);
        }
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        EventTable = new javax.swing.JTable();
        EventLabel = new javax.swing.JLabel();
        SwimmersLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        SwimmerTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        HeatTable = new javax.swing.JTable();
        HeatLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        CloseMenuItem = new javax.swing.JMenuItem();
        SeedMenu = new javax.swing.JMenu();
        SeedEventsMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Event Editor");

        EventTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        EventTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Number", "Gender", "Distance", "Name", "Object"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        EventTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EventTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(EventTable);

        EventLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        EventLabel.setText("Events");

        SwimmersLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SwimmersLabel.setText("Swimmers");

        SwimmerTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        SwimmerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Entered", "Swimmer", "Object"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(SwimmerTable);

        HeatTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Heat", "Lane", "Swimmer"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(HeatTable);

        HeatLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        HeatLabel.setText("Heats");

        jMenu1.setText("File");

        CloseMenuItem.setText("Close");
        CloseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(CloseMenuItem);

        jMenuBar1.add(jMenu1);

        SeedMenu.setText("Seed");

        SeedEventsMenuItem.setText("Seed Selected Events");
        SeedEventsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeedEventsMenuItemActionPerformed(evt);
            }
        });
        SeedMenu.add(SeedEventsMenuItem);

        jMenuBar1.add(SeedMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                    .addComponent(EventLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SwimmersLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                    .addComponent(HeatLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(EventLabel))
                    .addComponent(SwimmersLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .addComponent(HeatLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CloseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseMenuItemActionPerformed
        this.dispose();
    }//GEN-LAST:event_CloseMenuItemActionPerformed

    private void EventTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EventTableMouseClicked
        int[] rows = this.EventTable.getSelectedRows();
        
        if (rows.length != 1) {
            this.clearSwimmerTable();
            return;         
        }
        
        SwimMeetEvent event = (SwimMeetEvent)this.EventTable.getModel().getValueAt(rows[0], 4);
        
        this.populateSwimmerTable(event);
    }//GEN-LAST:event_EventTableMouseClicked

    private void seedEvent(SwimMeetEvent event) {
        // Need to fill this in when I have pool/session information
    }
    
    private void SeedEventsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeedEventsMenuItemActionPerformed
        // We need to find the selected events in the events table
        // and for each one, seed it.
        int rows[] = this.EventTable.getSelectedRows();
        SwimMeetEvent event;
        
        for(int i=0; i<rows.length;i++) {
            event = (SwimMeetEvent)this.EventTable.getModel().getValueAt(rows[i], 4);
            this.seedEvent(event);
        }
    }//GEN-LAST:event_SeedEventsMenuItemActionPerformed

    
    public static void OpenWindow() {
        EntryEditDialog dialog = new EntryEditDialog(new javax.swing.JFrame(), true);
        dialog.setVisible(true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem CloseMenuItem;
    private javax.swing.JLabel EventLabel;
    private javax.swing.JTable EventTable;
    private javax.swing.JLabel HeatLabel;
    private javax.swing.JTable HeatTable;
    private javax.swing.JMenuItem SeedEventsMenuItem;
    private javax.swing.JMenu SeedMenu;
    private javax.swing.JTable SwimmerTable;
    private javax.swing.JLabel SwimmersLabel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
