/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package meetdirector;

import entity.SeedTime;
import entity.SwimMeetAthlete;
import entity.SwimMeetEvent;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import org.usa_swimming.xsdif.CourseType;
import org.usa_swimming.xsdif.Gender;
import org.usa_swimming.xsdif.LscCodeType;
import org.usa_swimming.xsdif.OrganizationType;

/**
 *
 * @author nhorman
 */
public class SwimmerEditDialog extends javax.swing.JDialog {

    private SwimMeetAthlete AddingSwimmer = null;
    /**
     * Creates new form SwimmerEditDialog
     */
    public SwimmerEditDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.allenteredbuttongroup.add(this.AllEventsButton);
        this.allenteredbuttongroup.add(this.EnteredEventsButton);
        this.EntryTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.ClearEventTable();
    }

    private Boolean IsAddingSwimmer() {
        if (this.AddingSwimmer == null)
            return false;
        return true;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        allenteredbuttongroup = new javax.swing.ButtonGroup();
        SwimmerNamePane = new javax.swing.JScrollPane();
        swimmerDropDown = new javax.swing.JComboBox();
        SwimmersPanel = new javax.swing.JLabel();
        SwimmerInfoPanel = new javax.swing.JPanel();
        FirstNameLabel = new javax.swing.JLabel();
        FirstNameText = new javax.swing.JTextField();
        lastnamelabel = new javax.swing.JLabel();
        LastNameText = new javax.swing.JTextField();
        MiddleNameLabel = new javax.swing.JLabel();
        MiddleNameText = new javax.swing.JTextField();
        SuffixLabel = new javax.swing.JLabel();
        SuffixText = new javax.swing.JTextField();
        BrthdayLabel = new javax.swing.JLabel();
        GenderLabel = new javax.swing.JLabel();
        GenderCombo = new javax.swing.JComboBox();
        AtatchedLabel = new javax.swing.JLabel();
        AttachedCombo = new javax.swing.JComboBox();
        BirthdayDateChooserCombo = new datechooser.beans.DateChooserCombo();
        LSCCodeLabel = new javax.swing.JLabel();
        LSCCodeText = new javax.swing.JTextField();
        CitizenshipLabel = new javax.swing.JLabel();
        CitizenshipTExt = new javax.swing.JTextField();
        OrgTypeLabel = new javax.swing.JLabel();
        OrgTypeCombo = new javax.swing.JComboBox();
        IDLabel = new javax.swing.JLabel();
        IDText = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        EnteredEventsButton = new javax.swing.JRadioButton();
        EventsPanel = new javax.swing.JLabel();
        AllEventsButton = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        EntryTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        SeedTimeLabel = new javax.swing.JLabel();
        RawTimeLabel = new javax.swing.JLabel();
        RawSeedTimeText = new javax.swing.JTextField();
        ConvertedSeedTimeLabel = new javax.swing.JLabel();
        ConvertedTimeText = new javax.swing.JTextField();
        RawCourseLabel = new javax.swing.JLabel();
        MeetCourseLabel = new javax.swing.JLabel();
        AlternateCheckBox = new javax.swing.JCheckBox();
        CommitSeedButton = new javax.swing.JButton();
        RawCourseCombo = new javax.swing.JComboBox();
        MeetCourseCombo = new javax.swing.JComboBox();
        SwimmerInfoLabel = new javax.swing.JLabel();
        EditSwimmerButton = new javax.swing.JButton();
        AddSwimmerButton = new javax.swing.JButton();
        CommitButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();
        DelSwimmerButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Swimmer Information");

        swimmerDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                swimmerDropDownActionPerformed(evt);
            }
        });
        SwimmerNamePane.setViewportView(swimmerDropDown);

        SwimmersPanel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SwimmersPanel.setText("Swimmer");

        SwimmerInfoPanel.setEnabled(false);

        FirstNameLabel.setText("First Name");

        FirstNameText.setEnabled(false);

        lastnamelabel.setText("Last Name");

        LastNameText.setEnabled(false);

        MiddleNameLabel.setText("Middle Name");

        MiddleNameText.setEnabled(false);

        SuffixLabel.setText("Suffix");

        SuffixText.setEnabled(false);

        BrthdayLabel.setText("Birthday");

        GenderLabel.setText("Gender");

        GenderCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "male", "female", "mixed" }));
        GenderCombo.setEnabled(false);

        AtatchedLabel.setText("Attached");

        AttachedCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Yes", "No" }));
        AttachedCombo.setEnabled(false);

        BirthdayDateChooserCombo.setEnabled(false);

        LSCCodeLabel.setText("LSC code");

        LSCCodeText.setEnabled(false);

        CitizenshipLabel.setText("Citizenship");

        CitizenshipTExt.setEnabled(false);

        OrgTypeLabel.setText("Organization Type");

        OrgTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "USAS", "Masters", "NCAA", "NCAA Div I", "NCAA Div II", "NCAA Div III", "YMCA", "FINA", "HighSch", " " }));
        OrgTypeCombo.setEnabled(false);

        IDLabel.setText("ID");

        IDText.setEnabled(false);

        EnteredEventsButton.setText("Entered Events");
        EnteredEventsButton.setEnabled(false);
        EnteredEventsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EventsButtonActionPerformed(evt);
            }
        });

        EventsPanel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        EventsPanel.setText("Events");

        AllEventsButton.setSelected(true);
        AllEventsButton.setText("All Events");
        AllEventsButton.setEnabled(false);
        AllEventsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EventsButtonActionPerformed(evt);
            }
        });

        EntryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Entered", "Event Number", "Gender", "Distance", "Stroke"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        EntryTable.setEnabled(false);
        EntryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EntryTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(EntryTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(EnteredEventsButton)
                                .addGap(35, 35, 35)
                                .addComponent(AllEventsButton))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(111, 111, 111)
                                .addComponent(EventsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(EventsPanel)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EnteredEventsButton)
                    .addComponent(AllEventsButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setEnabled(false);

        SeedTimeLabel.setText("Seed Time");

        RawTimeLabel.setText("Raw Seed Time");

        RawSeedTimeText.setEnabled(false);

        ConvertedSeedTimeLabel.setText("Converted Seed Time");

        ConvertedTimeText.setEnabled(false);

        RawCourseLabel.setText("Raw Course");

        MeetCourseLabel.setText("Meet Course");

        AlternateCheckBox.setText("Alternate");
        AlternateCheckBox.setEnabled(false);

        CommitSeedButton.setText("Commit Seed Info");
        CommitSeedButton.setEnabled(false);
        CommitSeedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CommitSeedButtonActionPerformed(evt);
            }
        });

        RawCourseCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "LCM", "SCY", "SCM" }));
        RawCourseCombo.setEnabled(false);

        MeetCourseCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "LCM", "SCY", "SCM" }));
        MeetCourseCombo.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(SeedTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(RawTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(CommitSeedButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                                    .addComponent(AlternateCheckBox, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(MeetCourseLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(RawCourseLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ConvertedTimeText, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ConvertedSeedTimeLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(RawSeedTimeText, javax.swing.GroupLayout.Alignment.LEADING))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RawCourseCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(MeetCourseCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SeedTimeLabel)
                .addGap(48, 48, 48)
                .addComponent(RawTimeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RawSeedTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(ConvertedSeedTimeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ConvertedTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(RawCourseLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RawCourseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(MeetCourseLabel)
                .addGap(1, 1, 1)
                .addComponent(MeetCourseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(AlternateCheckBox)
                .addGap(28, 28, 28)
                .addComponent(CommitSeedButton)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout SwimmerInfoPanelLayout = new javax.swing.GroupLayout(SwimmerInfoPanel);
        SwimmerInfoPanel.setLayout(SwimmerInfoPanelLayout);
        SwimmerInfoPanelLayout.setHorizontalGroup(
            SwimmerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SwimmerInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SwimmerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SwimmerInfoPanelLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(SwimmerInfoPanelLayout.createSequentialGroup()
                        .addGroup(SwimmerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SwimmerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(BrthdayLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(FirstNameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                .addComponent(FirstNameText, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(BirthdayDateChooserCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CitizenshipLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CitizenshipTExt, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(SwimmerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lastnamelabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LastNameText, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(GenderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(GenderCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(OrgTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(OrgTypeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(45, 45, 45)
                        .addGroup(SwimmerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(SwimmerInfoPanelLayout.createSequentialGroup()
                                .addComponent(MiddleNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(SuffixLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SwimmerInfoPanelLayout.createSequentialGroup()
                                .addGroup(SwimmerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(MiddleNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AttachedCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(AtatchedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(IDLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(IDText))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(SwimmerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(SuffixText)
                                    .addComponent(LSCCodeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                    .addComponent(LSCCodeText))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        SwimmerInfoPanelLayout.setVerticalGroup(
            SwimmerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SwimmerInfoPanelLayout.createSequentialGroup()
                .addGroup(SwimmerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SwimmerInfoPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(SwimmerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FirstNameLabel)
                            .addComponent(lastnamelabel)
                            .addComponent(MiddleNameLabel)
                            .addComponent(SuffixLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(SwimmerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FirstNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LastNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MiddleNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SuffixText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(SwimmerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BrthdayLabel)
                            .addComponent(GenderLabel)
                            .addComponent(AtatchedLabel)
                            .addComponent(LSCCodeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(SwimmerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SwimmerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(SwimmerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(GenderCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AttachedCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(BirthdayDateChooserCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(LSCCodeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(SwimmerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CitizenshipLabel)
                            .addComponent(OrgTypeLabel)))
                    .addGroup(SwimmerInfoPanelLayout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(IDLabel)))
                .addGroup(SwimmerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SwimmerInfoPanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(SwimmerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CitizenshipTExt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(OrgTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(SwimmerInfoPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(IDText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addGroup(SwimmerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        SwimmerInfoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SwimmerInfoLabel.setText("Swimmer Information");

        EditSwimmerButton.setText("Edit Swimmer");
        EditSwimmerButton.setEnabled(false);
        EditSwimmerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditSwimmerButtonActionPerformed(evt);
            }
        });

        AddSwimmerButton.setText("Add Swimmer");
        AddSwimmerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddSwimmerButtonActionPerformed(evt);
            }
        });

        CommitButton.setText("Commit");
        CommitButton.setEnabled(false);
        CommitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CommitButtonActionPerformed(evt);
            }
        });

        CancelButton.setText("Cancel");
        CancelButton.setEnabled(false);
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        DelSwimmerButton.setText("Delete Swimmer");
        DelSwimmerButton.setToolTipText("");
        DelSwimmerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DelSwimmerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(EditSwimmerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CommitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(DelSwimmerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AddSwimmerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(89, 89, 89)
                        .addComponent(SwimmerInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SwimmersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(254, 254, 254)
                                .addComponent(SwimmerInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(SwimmerNamePane, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SwimmersPanel)
                    .addComponent(SwimmerInfoLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SwimmerNamePane, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EditSwimmerButton)
                            .addComponent(AddSwimmerButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DelSwimmerButton)
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CommitButton)
                            .addComponent(CancelButton)))
                    .addComponent(SwimmerInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void swimmerDropDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_swimmerDropDownActionPerformed
        // We've had a selection made in the swimmer list, lets look that swimmer up
        String name = (String)this.swimmerDropDown.getSelectedItem();
        
        // Now look the name up in the hash map
        SwimMeetAthlete swimmer = (SwimMeetAthlete)this.SwimmerDropDownMap.get(name);
        if (swimmer == null)
            return;
        this.PopulateSwimmerFields(swimmer);
        
        // Now that we populated the data, enable the edit button
        this.EditSwimmerButton.setEnabled(true);
        
        
    }//GEN-LAST:event_swimmerDropDownActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        this.CancelButton.setEnabled(false);
        this.CommitButton.setEnabled(false);
        this.AddSwimmerButton.setEnabled(true);
        this.EditSwimmerButton.setEnabled(true);
        if (this.IsAddingSwimmer() == true) {
            //Drop the swimmer object from the database
            this.AddingSwimmer.remove();
            this.AddingSwimmer = null;
            this.SetEnabledSwimmerEditFields(false);
            return;
        }
        
        String name = (String)this.swimmerDropDown.getSelectedItem();
        SwimMeetAthlete swimmer = (SwimMeetAthlete)this.SwimmerDropDownMap.get(name);
        if (swimmer != null) {
            swimmer.refresh();
            this.PopulateSwimmerFields(swimmer);
        }
        this.SetEnabledSwimmerEditFields(false);
            
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void EditSwimmerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditSwimmerButtonActionPerformed
        this.CancelButton.setEnabled(true);
        this.CommitButton.setEnabled(true);
        this.EditSwimmerButton.setEnabled(false);
        this.AddSwimmerButton.setEnabled(false);
        this.SetEnabledSwimmerEditFields(true);
    }//GEN-LAST:event_EditSwimmerButtonActionPerformed

    private void EntryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EntryTableMouseClicked
        SwimMeetAthlete swimmer;
        if (this.EntryTable.isEnabled() == false)
            return;
        int seedidx = (Integer)this.EntryTable.getValueAt(this.EntryTable.getSelectedRow(), 1);
        int eventNumber = (int)this.EntryTable.getValueAt(seedidx, 1);
        
            
        SwimMeetEvent event = SwimMeetEvent.getEventByEventNumber(new Integer(eventNumber));
        String name = (String)this.swimmerDropDown.getSelectedItem();
        
        if (this.IsAddingSwimmer() == true)
            swimmer = this.AddingSwimmer;
        else {
            // Now look the name up in the hash map
            swimmer = (SwimMeetAthlete)this.SwimmerDropDownMap.get(name);
        }
        
        SeedTime seed = swimmer.getSeedTime(event);
        if (seed != null)
            this.populateSeedTimeData(seed);
        this.setSeedEditEnabled(true);
    }//GEN-LAST:event_EntryTableMouseClicked

    private void EventsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EventsButtonActionPerformed
        // We've had a selection made in the swimmer list, lets look that swimmer up
        String name = (String)this.swimmerDropDown.getSelectedItem();
        
        // Now look the name up in the hash map
        SwimMeetAthlete swimmer = (SwimMeetAthlete)this.SwimmerDropDownMap.get(name);
        this.PopulateEventTable(this.AllEventsButton.isSelected(), swimmer);
    }//GEN-LAST:event_EventsButtonActionPerformed

    private void CommitSeedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CommitSeedButtonActionPerformed
        int seedidx = (Integer)this.EntryTable.getValueAt(this.EntryTable.getSelectedRow(), 1);
        int eventNumber = (int)this.EntryTable.getValueAt(seedidx, 1);
        SwimMeetAthlete swimmer;
        SwimMeetEvent event = SwimMeetEvent.getEventByEventNumber(new Integer(eventNumber));
        String name = (String)this.swimmerDropDown.getSelectedItem();
        
        // Now look the name up in the hash map
        if (this.IsAddingSwimmer() == true)
            swimmer = this.AddingSwimmer;
        else
            swimmer = (SwimMeetAthlete)this.SwimmerDropDownMap.get(name);
        SeedTime seed = swimmer.getSeedTime(event);
        this.updateSeedTimeData(seed);
        this.setSeedEditEnabled(false);
    }//GEN-LAST:event_CommitSeedButtonActionPerformed

    private void CommitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CommitButtonActionPerformed
        SwimMeetAthlete swimmer;
        
        if (this.IsAddingSwimmer() == true) {
            swimmer = this.AddingSwimmer;
            this.AddingSwimmer = null;
        } else {
            // We've had a selection made in the swimmer list, lets look that swimmer up
            String name = (String)this.swimmerDropDown.getSelectedItem();
        
            // Now look the name up in the hash map
            swimmer = (SwimMeetAthlete)this.SwimmerDropDownMap.get(name);
        }
        
        this.updateSwimmerInfo(swimmer);
        this.setSeedEditEnabled(false);
        this.SetEnabledSwimmerEditFields(false);
        this.EditSwimmerButton.setEnabled(true);
        this.CancelButton.setEnabled(false);
        this.CommitButton.setEnabled(false);
        this.AddSwimmerButton.setEnabled(true);
        // Refresh the swimmer dropdown
        this.PopulateSwimmerDropDown();
    }//GEN-LAST:event_CommitButtonActionPerformed

    private void AddSwimmerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddSwimmerButtonActionPerformed
        this.CancelButton.setEnabled(true);
        this.EditSwimmerButton.setEnabled(false);
        this.CommitButton.setEnabled(true);
        this.AddSwimmerButton.setEnabled(false);
        //create a new swimmer
        SwimMeetAthlete swimmer = new SwimMeetAthlete(null, true);
        this.PopulateSwimmerFields(swimmer);
        this.AddingSwimmer = swimmer;      
        this.SetEnabledSwimmerEditFields(true);
    }//GEN-LAST:event_AddSwimmerButtonActionPerformed

    private void DelSwimmerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DelSwimmerButtonActionPerformed
        String name = (String)this.swimmerDropDown.getSelectedItem();
        SwimMeetAthlete swimmer = (SwimMeetAthlete)this.SwimmerDropDownMap.get(name);
        swimmer.remove();
        this.PopulateSwimmerDropDown();
    }//GEN-LAST:event_DelSwimmerButtonActionPerformed

    private void updateSwimmerInfo(SwimMeetAthlete swimmer) {
        
        
        swimmer.startUpdate();
        
        swimmer.getName().setFirstName(this.FirstNameText.getText());
        swimmer.getName().setLastName(this.LastNameText.getText());
        swimmer.getName().setMiddleName(this.MiddleNameText.getText());
        swimmer.getName().setSuffix(this.SuffixText.getText());
        Calendar Bd = this.BirthdayDateChooserCombo.getSelectedDate();
        swimmer.setBirthDate(new GregorianCalendar(Bd.get(Calendar.YEAR), Bd.get(Calendar.MONTH), 
                Bd.get(Calendar.DAY_OF_MONTH), Bd.get(Calendar.HOUR_OF_DAY), Bd.get(Calendar.MINUTE)));
        swimmer.setGender(Gender.fromValue((String)this.GenderCombo.getSelectedItem()));
        
        if (this.AttachedCombo.getSelectedIndex() == 0)
            swimmer.setIsAttached(true);
        else
            swimmer.setIsAttached(false);
       
        swimmer.setLsc(LscCodeType.fromValue(this.LSCCodeText.getText()));
        String[] citizen = new String[1];
        citizen[0] = this.CitizenshipTExt.getText();
        swimmer.setCitizenOf(citizen);
        swimmer.setOrganization(OrganizationType.fromValue((String)this.OrgTypeCombo.getSelectedItem()));
        swimmer.setUsasID(this.IDText.getText());
        
        List<SwimMeetEvent> events = swimmer.getEnteredEvents();
        for (int i=0; i < this.EntryTable.getRowCount(); i++) {
            Boolean shouldBeEntered = (Boolean)this.EntryTable.getValueAt(i, 0);
            SwimMeetEvent idxEvent = SwimMeetEvent.getEventByEventNumber((Integer)this.EntryTable.getValueAt(i, 1));
            
            if (shouldBeEntered == true) {
                // If we should be entered, and the event list has this event, we're done
                if (events.contains(idxEvent))
                    continue;
                
                // if the old event list doesn't have this set, then we need to add it
                events.add(idxEvent);
                try {
                    idxEvent.addSwimmer(swimmer, false);
                } catch (Exception e) {
                    System.out.println("Can't add swimmer: " + e.getLocalizedMessage());
                }
                
            } else {
                // This is event we should _not_ be in, so make sure we're not
                if (events.contains(idxEvent)) {
                    events.remove(idxEvent);
                    try {
                        idxEvent.removeSwimmer(swimmer, false);
                    } catch (Exception e) {
                        System.out.println("Can't remove swimmer: " + e.getLocalizedMessage());
                    }
                }
            } //else shouldBeEntered
        } // for loop
        swimmer.setEnteredEvents(events);
        
        swimmer.commitUpdate();
    }
    
    private void setSeedEditEnabled(Boolean onoff) {
        this.RawSeedTimeText.setEnabled(onoff);
        this.ConvertedTimeText.setEnabled(onoff);
        this.MeetCourseCombo.setEnabled(onoff);
        this.RawCourseCombo.setEnabled(onoff);
        this.CommitSeedButton.setEnabled(onoff);
        this.AlternateCheckBox.setEnabled(onoff);
    }
    
    private void updateSeedTimeData(SeedTime seed) {
        seed.startUpdate();
        seed.setRawSeedTime(this.RawSeedTimeText.getText());
        seed.setConvertedSeedTime(this.ConvertedTimeText.getText());
        seed.setRawCourse(CourseType.fromValue((String)this.RawCourseCombo.getSelectedItem()));
        seed.setMeetCourse(CourseType.fromValue((String)this.MeetCourseCombo.getSelectedItem()));
        seed.setIsAlternate(this.AlternateCheckBox.isSelected());
        seed.commitUpdate();
    }
    
    private void populateSeedTimeData(SeedTime seed) {
        this.RawSeedTimeText.setText(seed.getRawSeedTime());
        this.ConvertedTimeText.setText(seed.getConvertedSeedTime());
        this.RawCourseCombo.setSelectedItem(seed.getRawCourse().name());
        this.MeetCourseCombo.setSelectedItem(seed.getMeetCourse().name());
        this.AlternateCheckBox.setSelected(seed.getIsAlternate());
    }
    
    private void SetEnabledSwimmerEditFields(Boolean onoff) {
        this.FirstNameText.setEnabled(onoff);
        this.LastNameText.setEnabled(onoff);
        this.MiddleNameText.setEnabled(onoff);
        this.SuffixText.setEnabled(onoff);
        this.BirthdayDateChooserCombo.setEnabled(onoff);
        this.GenderCombo.setEnabled(onoff);
        this.AttachedCombo.setEnabled(onoff);
        this.LSCCodeText.setEnabled(onoff);
        this.CitizenshipTExt.setEnabled(onoff);
        this.OrgTypeCombo.setEnabled(onoff);
        this.IDText.setEnabled(onoff);
        this.AllEventsButton.setEnabled(onoff);
        this.EnteredEventsButton.setEnabled(onoff);
        this.EntryTable.setEnabled(onoff);
    }
    
    private void ClearEventTable() {
        DefaultTableModel dm = (DefaultTableModel)this.EntryTable.getModel();
        dm.setRowCount(0);
    }
    
    private void PopulateEventTable(Boolean AllEvents, SwimMeetAthlete swimmer) {
        List<SwimMeetEvent> events;
        Object[] rowData = new Object[5];
        Comparator<SwimMeetEvent> NumericalSort = new Comparator<SwimMeetEvent>() {
            public int compare(SwimMeetEvent c1, SwimMeetEvent c2) {
                    return c1.getEventNumber().compareTo(c2.getEventNumber());
            }
        };
        this.ClearEventTable();
        events = SwimMeetEvent.getAllEvents();
        Collections.sort(events, NumericalSort);
        Iterator<SwimMeetEvent> iterator = events.iterator();
        DefaultTableModel model = (DefaultTableModel) this.EntryTable.getModel();
        
        while (iterator.hasNext()) {
            SwimMeetEvent event = iterator.next();
            Boolean isEntered = event.getSwimmers().contains(swimmer);
            if ((AllEvents == false) && (isEntered == false))
                continue;
            rowData[0] = event.getSwimmers().contains(swimmer);
            rowData[1] = event.getEventNumber();
            rowData[2] = event.getGender();
            rowData[3] = event.getDistance();
            rowData[4] = event.getStroke();
            model.addRow(rowData);
        }
    }
    
    private void PopulateSwimmerFields(SwimMeetAthlete swimmer) {
       
        this.FirstNameText.setText(swimmer.getName().getFirstName());
        this.LastNameText.setText(swimmer.getName().getLastName());
        this.MiddleNameText.setText(swimmer.getName().getMiddleName());
        this.SuffixText.setText(swimmer.getName().getSuffix());
        this.BirthdayDateChooserCombo.setEnabled(true);
        this.BirthdayDateChooserCombo.setSelectedDate(swimmer.getBirthDate());
        this.BirthdayDateChooserCombo.setEnabled(false);
        
        this.GenderCombo.setSelectedItem(swimmer.getGender().value());
        
        if (swimmer.isIsAttached())
            this.AttachedCombo.setSelectedIndex(0);
        else
            this.AttachedCombo.setSelectedIndex(1);
        
        this.LSCCodeText.setText(swimmer.getLsc().name());
        this.CitizenshipTExt.setText(swimmer.getCitizenOf()[0]);
        this.OrgTypeCombo.setSelectedItem(swimmer.getOrganization().value());
        this.IDText.setText(swimmer.getUsasID());
        this.ClearEventTable();
        this.PopulateEventTable(this.AllEventsButton.isSelected(), swimmer);
    }
    
    private void PopulateSwimmerDropDown() {
         //When the component is shown, we need to build a list of swimmers and add them to this component
        List<SwimMeetAthlete> swimmers;
        Comparator<SwimMeetAthlete> alphabeticalSort = new Comparator<SwimMeetAthlete>() {
            public int compare(SwimMeetAthlete c1, SwimMeetAthlete c2) {
                    return c1.getName().getLastName().compareTo(c2.getName().getLastName());
            }
        };
        this.SwimmerDropDownMap = new HashMap();
        this.swimmerDropDown.removeAllItems();
        // STart by getting a full list of all swimmers
        swimmers = SwimMeetAthlete.getAllAthletes();
        if (swimmers.isEmpty())
            return;
        
        Collections.sort(swimmers, alphabeticalSort);
        
        // Now we have a sorted list of swimmmers, add each swimmer to the combo box
        Iterator<SwimMeetAthlete> iterator = swimmers.iterator();
        while (iterator.hasNext()) {
                SwimMeetAthlete swimmer = iterator.next();
                String name = swimmer.getName().getLastName() + ", " + swimmer.getName().getFirstName();
                this.swimmerDropDown.addItem(name);
                this.SwimmerDropDownMap.put(name, swimmer);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void OpenWindow() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SwimmerEditDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SwimmerEditDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SwimmerEditDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SwimmerEditDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SwimmerEditDialog dialog = new SwimmerEditDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        return;
                    }
                });
                dialog.PopulateSwimmerDropDown();
                dialog.setVisible(true);
            }
        });
    }
    private HashMap SwimmerDropDownMap;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddSwimmerButton;
    private javax.swing.JRadioButton AllEventsButton;
    private javax.swing.JCheckBox AlternateCheckBox;
    private javax.swing.JLabel AtatchedLabel;
    private javax.swing.JComboBox AttachedCombo;
    private datechooser.beans.DateChooserCombo BirthdayDateChooserCombo;
    private javax.swing.JLabel BrthdayLabel;
    private javax.swing.JButton CancelButton;
    private javax.swing.JLabel CitizenshipLabel;
    private javax.swing.JTextField CitizenshipTExt;
    private javax.swing.JButton CommitButton;
    private javax.swing.JButton CommitSeedButton;
    private javax.swing.JLabel ConvertedSeedTimeLabel;
    private javax.swing.JTextField ConvertedTimeText;
    private javax.swing.JButton DelSwimmerButton;
    private javax.swing.JButton EditSwimmerButton;
    private javax.swing.JRadioButton EnteredEventsButton;
    private javax.swing.JTable EntryTable;
    private javax.swing.JLabel EventsPanel;
    private javax.swing.JLabel FirstNameLabel;
    private javax.swing.JTextField FirstNameText;
    private javax.swing.JComboBox GenderCombo;
    private javax.swing.JLabel GenderLabel;
    private javax.swing.JLabel IDLabel;
    private javax.swing.JTextField IDText;
    private javax.swing.JLabel LSCCodeLabel;
    private javax.swing.JTextField LSCCodeText;
    private javax.swing.JTextField LastNameText;
    private javax.swing.JComboBox MeetCourseCombo;
    private javax.swing.JLabel MeetCourseLabel;
    private javax.swing.JLabel MiddleNameLabel;
    private javax.swing.JTextField MiddleNameText;
    private javax.swing.JComboBox OrgTypeCombo;
    private javax.swing.JLabel OrgTypeLabel;
    private javax.swing.JComboBox RawCourseCombo;
    private javax.swing.JLabel RawCourseLabel;
    private javax.swing.JTextField RawSeedTimeText;
    private javax.swing.JLabel RawTimeLabel;
    private javax.swing.JLabel SeedTimeLabel;
    private javax.swing.JLabel SuffixLabel;
    private javax.swing.JTextField SuffixText;
    private javax.swing.JLabel SwimmerInfoLabel;
    private javax.swing.JPanel SwimmerInfoPanel;
    private javax.swing.JScrollPane SwimmerNamePane;
    private javax.swing.JLabel SwimmersPanel;
    private javax.swing.ButtonGroup allenteredbuttongroup;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lastnamelabel;
    private javax.swing.JComboBox swimmerDropDown;
    // End of variables declaration//GEN-END:variables
}
